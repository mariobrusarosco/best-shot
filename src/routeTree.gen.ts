/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UiSystemImport } from './routes/ui-system'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index.route'
import { Route as AuthMyAccountImport } from './routes/_auth.my-account'
import { Route as AuthDashboardImport } from './routes/_auth.dashboard'

// Create Virtual Routes

const AuthTournamentsIndexLazyImport = createFileRoute('/_auth/tournaments/')()
const AuthLeaguesIndexLazyImport = createFileRoute('/_auth/leagues/')()
const AuthLeaguesLeagueIdLazyImport = createFileRoute(
  '/_auth/leagues/$leagueId',
)()
const AuthTournamentsTournamentIdIndexLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/',
)()
const AuthTournamentsTournamentIdStandingsLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/standings',
)()
const AuthTournamentsTournamentIdSimulatorLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/simulator',
)()
const AuthTournamentsTournamentIdRankingLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/ranking',
)()
const AuthTournamentsTournamentIdMatchesLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/matches',
)()

// Create/Update Routes

const UiSystemRoute = UiSystemImport.update({
  path: '/ui-system',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthMyAccountRoute = AuthMyAccountImport.update({
  path: '/my-account',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthTournamentsIndexLazyRoute = AuthTournamentsIndexLazyImport.update({
  path: '/tournaments/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.tournaments/index.lazy').then((d) => d.Route),
)

const AuthLeaguesIndexLazyRoute = AuthLeaguesIndexLazyImport.update({
  path: '/leagues/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.leagues/index.lazy').then((d) => d.Route),
)

const AuthLeaguesLeagueIdLazyRoute = AuthLeaguesLeagueIdLazyImport.update({
  path: '/leagues/$leagueId',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.leagues/$leagueId.lazy').then((d) => d.Route),
)

const AuthTournamentsTournamentIdIndexLazyRoute =
  AuthTournamentsTournamentIdIndexLazyImport.update({
    path: '/tournaments/$tournamentId/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.tournaments/$tournamentId/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthTournamentsTournamentIdStandingsLazyRoute =
  AuthTournamentsTournamentIdStandingsLazyImport.update({
    path: '/tournaments/$tournamentId/standings',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.tournaments/$tournamentId/standings.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthTournamentsTournamentIdSimulatorLazyRoute =
  AuthTournamentsTournamentIdSimulatorLazyImport.update({
    path: '/tournaments/$tournamentId/simulator',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.tournaments/$tournamentId/simulator.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthTournamentsTournamentIdRankingLazyRoute =
  AuthTournamentsTournamentIdRankingLazyImport.update({
    path: '/tournaments/$tournamentId/ranking',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.tournaments/$tournamentId/ranking.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthTournamentsTournamentIdMatchesLazyRoute =
  AuthTournamentsTournamentIdMatchesLazyImport.update({
    path: '/tournaments/$tournamentId/matches',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.tournaments/$tournamentId/matches.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/ui-system': {
      id: '/ui-system'
      path: '/ui-system'
      fullPath: '/ui-system'
      preLoaderRoute: typeof UiSystemImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_auth/my-account': {
      id: '/_auth/my-account'
      path: '/my-account'
      fullPath: '/my-account'
      preLoaderRoute: typeof AuthMyAccountImport
      parentRoute: typeof AuthImport
    }
    '/_auth/leagues/$leagueId': {
      id: '/_auth/leagues/$leagueId'
      path: '/leagues/$leagueId'
      fullPath: '/leagues/$leagueId'
      preLoaderRoute: typeof AuthLeaguesLeagueIdLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/leagues/': {
      id: '/_auth/leagues/'
      path: '/leagues'
      fullPath: '/leagues'
      preLoaderRoute: typeof AuthLeaguesIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/': {
      id: '/_auth/tournaments/'
      path: '/tournaments'
      fullPath: '/tournaments'
      preLoaderRoute: typeof AuthTournamentsIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId/matches': {
      id: '/_auth/tournaments/$tournamentId/matches'
      path: '/tournaments/$tournamentId/matches'
      fullPath: '/tournaments/$tournamentId/matches'
      preLoaderRoute: typeof AuthTournamentsTournamentIdMatchesLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId/ranking': {
      id: '/_auth/tournaments/$tournamentId/ranking'
      path: '/tournaments/$tournamentId/ranking'
      fullPath: '/tournaments/$tournamentId/ranking'
      preLoaderRoute: typeof AuthTournamentsTournamentIdRankingLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId/simulator': {
      id: '/_auth/tournaments/$tournamentId/simulator'
      path: '/tournaments/$tournamentId/simulator'
      fullPath: '/tournaments/$tournamentId/simulator'
      preLoaderRoute: typeof AuthTournamentsTournamentIdSimulatorLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId/standings': {
      id: '/_auth/tournaments/$tournamentId/standings'
      path: '/tournaments/$tournamentId/standings'
      fullPath: '/tournaments/$tournamentId/standings'
      preLoaderRoute: typeof AuthTournamentsTournamentIdStandingsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId/': {
      id: '/_auth/tournaments/$tournamentId/'
      path: '/tournaments/$tournamentId'
      fullPath: '/tournaments/$tournamentId'
      preLoaderRoute: typeof AuthTournamentsTournamentIdIndexLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRouteRoute,
  AuthRoute: AuthRoute.addChildren({
    AuthDashboardRoute,
    AuthMyAccountRoute,
    AuthLeaguesLeagueIdLazyRoute,
    AuthLeaguesIndexLazyRoute,
    AuthTournamentsIndexLazyRoute,
    AuthTournamentsTournamentIdMatchesLazyRoute,
    AuthTournamentsTournamentIdRankingLazyRoute,
    AuthTournamentsTournamentIdSimulatorLazyRoute,
    AuthTournamentsTournamentIdStandingsLazyRoute,
    AuthTournamentsTournamentIdIndexLazyRoute,
  }),
  UiSystemRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/ui-system"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard",
        "/_auth/my-account",
        "/_auth/leagues/$leagueId",
        "/_auth/leagues/",
        "/_auth/tournaments/",
        "/_auth/tournaments/$tournamentId/matches",
        "/_auth/tournaments/$tournamentId/ranking",
        "/_auth/tournaments/$tournamentId/simulator",
        "/_auth/tournaments/$tournamentId/standings",
        "/_auth/tournaments/$tournamentId/"
      ]
    },
    "/ui-system": {
      "filePath": "ui-system.tsx"
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth"
    },
    "/_auth/my-account": {
      "filePath": "_auth.my-account.tsx",
      "parent": "/_auth"
    },
    "/_auth/leagues/$leagueId": {
      "filePath": "_auth.leagues/$leagueId.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/leagues/": {
      "filePath": "_auth.leagues/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/": {
      "filePath": "_auth.tournaments/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/$tournamentId/matches": {
      "filePath": "_auth.tournaments/$tournamentId/matches.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/$tournamentId/ranking": {
      "filePath": "_auth.tournaments/$tournamentId/ranking.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/$tournamentId/simulator": {
      "filePath": "_auth.tournaments/$tournamentId/simulator.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/$tournamentId/standings": {
      "filePath": "_auth.tournaments/$tournamentId/standings.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/$tournamentId/": {
      "filePath": "_auth.tournaments/$tournamentId/index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
