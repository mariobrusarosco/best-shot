/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UiSystemRouteImport } from './routes/ui-system'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteRouteImport } from './routes/index.route'
import { Route as AuthMyAccountRouteImport } from './routes/_auth.my-account'
import { Route as AuthDashboardRouteImport } from './routes/_auth.dashboard'
import { Route as AuthAdminLayoutRouteImport } from './routes/_auth.admin/_layout'
import { Route as AuthTournamentsTournamentIdLayoutRouteImport } from './routes/_auth.tournaments/$tournamentId/_layout'
import { Route as AuthAdminLayoutExecutionJobsRouteImport } from './routes/_auth.admin/_layout.execution-jobs'

const SignupLazyRouteImport = createFileRoute('/signup')()
const LoginLazyRouteImport = createFileRoute('/login')()
const AuthAdminRouteImport = createFileRoute('/_auth/admin')()
const AuthTournamentsTournamentIdRouteImport = createFileRoute(
  '/_auth/tournaments/$tournamentId',
)()
const AuthTournamentsIndexLazyRouteImport = createFileRoute(
  '/_auth/tournaments/',
)()
const AuthLeaguesIndexLazyRouteImport = createFileRoute('/_auth/leagues/')()
const AuthLeaguesLeagueIdIndexLazyRouteImport = createFileRoute(
  '/_auth/leagues/$leagueId/',
)()
const AuthAdminLayoutIndexLazyRouteImport = createFileRoute(
  '/_auth/admin/_layout/',
)()
const AuthTournamentsTournamentIdLayoutStandingsLazyRouteImport =
  createFileRoute('/_auth/tournaments/$tournamentId/_layout/standings')()
const AuthTournamentsTournamentIdLayoutSimulatorLazyRouteImport =
  createFileRoute('/_auth/tournaments/$tournamentId/_layout/simulator')()
const AuthTournamentsTournamentIdLayoutPerformanceLazyRouteImport =
  createFileRoute('/_auth/tournaments/$tournamentId/_layout/performance')()
const AuthTournamentsTournamentIdLayoutMatchesLazyRouteImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/_layout/matches',
)()
const AuthAdminLayoutTournamentTournamentIdLazyRouteImport = createFileRoute(
  '/_auth/admin/_layout/tournament/$tournamentId',
)()

const SignupLazyRoute = SignupLazyRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))
const LoginLazyRoute = LoginLazyRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))
const UiSystemRoute = UiSystemRouteImport.update({
  id: '/ui-system',
  path: '/ui-system',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRouteRoute = IndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAdminRoute = AuthAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthRoute,
} as any)
const AuthMyAccountRoute = AuthMyAccountRouteImport.update({
  id: '/my-account',
  path: '/my-account',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const AuthTournamentsTournamentIdRoute =
  AuthTournamentsTournamentIdRouteImport.update({
    id: '/tournaments/$tournamentId',
    path: '/tournaments/$tournamentId',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthTournamentsIndexLazyRoute =
  AuthTournamentsIndexLazyRouteImport.update({
    id: '/tournaments/',
    path: '/tournaments/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.tournaments/index.lazy').then((d) => d.Route),
  )
const AuthLeaguesIndexLazyRoute = AuthLeaguesIndexLazyRouteImport.update({
  id: '/leagues/',
  path: '/leagues/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.leagues/index.lazy').then((d) => d.Route),
)
const AuthAdminLayoutRoute = AuthAdminLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AuthAdminRoute,
} as any)
const AuthLeaguesLeagueIdIndexLazyRoute =
  AuthLeaguesLeagueIdIndexLazyRouteImport.update({
    id: '/leagues/$leagueId/',
    path: '/leagues/$leagueId/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.leagues/$leagueId/index.lazy').then((d) => d.Route),
  )
const AuthAdminLayoutIndexLazyRoute =
  AuthAdminLayoutIndexLazyRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_auth.admin/_layout.index.lazy').then((d) => d.Route),
  )
const AuthTournamentsTournamentIdLayoutRoute =
  AuthTournamentsTournamentIdLayoutRouteImport.update({
    id: '/_layout',
    getParentRoute: () => AuthTournamentsTournamentIdRoute,
  } as any)
const AuthAdminLayoutExecutionJobsRoute =
  AuthAdminLayoutExecutionJobsRouteImport.update({
    id: '/execution-jobs',
    path: '/execution-jobs',
    getParentRoute: () => AuthAdminLayoutRoute,
  } as any)
const AuthTournamentsTournamentIdLayoutStandingsLazyRoute =
  AuthTournamentsTournamentIdLayoutStandingsLazyRouteImport.update({
    id: '/standings',
    path: '/standings',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.standings.lazy'
    ).then((d) => d.Route),
  )
const AuthTournamentsTournamentIdLayoutSimulatorLazyRoute =
  AuthTournamentsTournamentIdLayoutSimulatorLazyRouteImport.update({
    id: '/simulator',
    path: '/simulator',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.simulator.lazy'
    ).then((d) => d.Route),
  )
const AuthTournamentsTournamentIdLayoutPerformanceLazyRoute =
  AuthTournamentsTournamentIdLayoutPerformanceLazyRouteImport.update({
    id: '/performance',
    path: '/performance',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.performance.lazy'
    ).then((d) => d.Route),
  )
const AuthTournamentsTournamentIdLayoutMatchesLazyRoute =
  AuthTournamentsTournamentIdLayoutMatchesLazyRouteImport.update({
    id: '/matches',
    path: '/matches',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.matches.lazy'
    ).then((d) => d.Route),
  )
const AuthAdminLayoutTournamentTournamentIdLazyRoute =
  AuthAdminLayoutTournamentTournamentIdLazyRouteImport.update({
    id: '/tournament/$tournamentId',
    path: '/tournament/$tournamentId',
    getParentRoute: () => AuthAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_auth.admin/_layout.tournament.$tournamentId.lazy').then(
      (d) => d.Route,
    ),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/ui-system': typeof UiSystemRoute
  '/login': typeof LoginLazyRoute
  '/signup': typeof SignupLazyRoute
  '/dashboard': typeof AuthDashboardRoute
  '/my-account': typeof AuthMyAccountRoute
  '/admin': typeof AuthAdminLayoutRouteWithChildren
  '/leagues': typeof AuthLeaguesIndexLazyRoute
  '/tournaments': typeof AuthTournamentsIndexLazyRoute
  '/admin/execution-jobs': typeof AuthAdminLayoutExecutionJobsRoute
  '/tournaments/$tournamentId': typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
  '/admin/': typeof AuthAdminLayoutIndexLazyRoute
  '/leagues/$leagueId': typeof AuthLeaguesLeagueIdIndexLazyRoute
  '/admin/tournament/$tournamentId': typeof AuthAdminLayoutTournamentTournamentIdLazyRoute
  '/tournaments/$tournamentId/matches': typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  '/tournaments/$tournamentId/performance': typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  '/tournaments/$tournamentId/simulator': typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  '/tournaments/$tournamentId/standings': typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/ui-system': typeof UiSystemRoute
  '/login': typeof LoginLazyRoute
  '/signup': typeof SignupLazyRoute
  '/dashboard': typeof AuthDashboardRoute
  '/my-account': typeof AuthMyAccountRoute
  '/admin': typeof AuthAdminLayoutIndexLazyRoute
  '/leagues': typeof AuthLeaguesIndexLazyRoute
  '/tournaments': typeof AuthTournamentsIndexLazyRoute
  '/admin/execution-jobs': typeof AuthAdminLayoutExecutionJobsRoute
  '/tournaments/$tournamentId': typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
  '/leagues/$leagueId': typeof AuthLeaguesLeagueIdIndexLazyRoute
  '/admin/tournament/$tournamentId': typeof AuthAdminLayoutTournamentTournamentIdLazyRoute
  '/tournaments/$tournamentId/matches': typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  '/tournaments/$tournamentId/performance': typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  '/tournaments/$tournamentId/simulator': typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  '/tournaments/$tournamentId/standings': typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRouteRoute
  '/_auth': typeof AuthRouteWithChildren
  '/ui-system': typeof UiSystemRoute
  '/login': typeof LoginLazyRoute
  '/signup': typeof SignupLazyRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/my-account': typeof AuthMyAccountRoute
  '/_auth/admin': typeof AuthAdminRouteWithChildren
  '/_auth/admin/_layout': typeof AuthAdminLayoutRouteWithChildren
  '/_auth/leagues/': typeof AuthLeaguesIndexLazyRoute
  '/_auth/tournaments/': typeof AuthTournamentsIndexLazyRoute
  '/_auth/admin/_layout/execution-jobs': typeof AuthAdminLayoutExecutionJobsRoute
  '/_auth/tournaments/$tournamentId': typeof AuthTournamentsTournamentIdRouteWithChildren
  '/_auth/tournaments/$tournamentId/_layout': typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
  '/_auth/admin/_layout/': typeof AuthAdminLayoutIndexLazyRoute
  '/_auth/leagues/$leagueId/': typeof AuthLeaguesLeagueIdIndexLazyRoute
  '/_auth/admin/_layout/tournament/$tournamentId': typeof AuthAdminLayoutTournamentTournamentIdLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/matches': typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/performance': typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/simulator': typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/standings': typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ui-system'
    | '/login'
    | '/signup'
    | '/dashboard'
    | '/my-account'
    | '/admin'
    | '/leagues'
    | '/tournaments'
    | '/admin/execution-jobs'
    | '/tournaments/$tournamentId'
    | '/admin/'
    | '/leagues/$leagueId'
    | '/admin/tournament/$tournamentId'
    | '/tournaments/$tournamentId/matches'
    | '/tournaments/$tournamentId/performance'
    | '/tournaments/$tournamentId/simulator'
    | '/tournaments/$tournamentId/standings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ui-system'
    | '/login'
    | '/signup'
    | '/dashboard'
    | '/my-account'
    | '/admin'
    | '/leagues'
    | '/tournaments'
    | '/admin/execution-jobs'
    | '/tournaments/$tournamentId'
    | '/leagues/$leagueId'
    | '/admin/tournament/$tournamentId'
    | '/tournaments/$tournamentId/matches'
    | '/tournaments/$tournamentId/performance'
    | '/tournaments/$tournamentId/simulator'
    | '/tournaments/$tournamentId/standings'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/ui-system'
    | '/login'
    | '/signup'
    | '/_auth/dashboard'
    | '/_auth/my-account'
    | '/_auth/admin'
    | '/_auth/admin/_layout'
    | '/_auth/leagues/'
    | '/_auth/tournaments/'
    | '/_auth/admin/_layout/execution-jobs'
    | '/_auth/tournaments/$tournamentId'
    | '/_auth/tournaments/$tournamentId/_layout'
    | '/_auth/admin/_layout/'
    | '/_auth/leagues/$leagueId/'
    | '/_auth/admin/_layout/tournament/$tournamentId'
    | '/_auth/tournaments/$tournamentId/_layout/matches'
    | '/_auth/tournaments/$tournamentId/_layout/performance'
    | '/_auth/tournaments/$tournamentId/_layout/simulator'
    | '/_auth/tournaments/$tournamentId/_layout/standings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  AuthRoute: typeof AuthRouteWithChildren
  UiSystemRoute: typeof UiSystemRoute
  LoginLazyRoute: typeof LoginLazyRoute
  SignupLazyRoute: typeof SignupLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ui-system': {
      id: '/ui-system'
      path: '/ui-system'
      fullPath: '/ui-system'
      preLoaderRoute: typeof UiSystemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/admin': {
      id: '/_auth/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthAdminRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/my-account': {
      id: '/_auth/my-account'
      path: '/my-account'
      fullPath: '/my-account'
      preLoaderRoute: typeof AuthMyAccountRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/tournaments/$tournamentId': {
      id: '/_auth/tournaments/$tournamentId'
      path: '/tournaments/$tournamentId'
      fullPath: '/tournaments/$tournamentId'
      preLoaderRoute: typeof AuthTournamentsTournamentIdRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/tournaments/': {
      id: '/_auth/tournaments/'
      path: '/tournaments'
      fullPath: '/tournaments'
      preLoaderRoute: typeof AuthTournamentsIndexLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/leagues/': {
      id: '/_auth/leagues/'
      path: '/leagues'
      fullPath: '/leagues'
      preLoaderRoute: typeof AuthLeaguesIndexLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/admin/_layout': {
      id: '/_auth/admin/_layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthAdminLayoutRouteImport
      parentRoute: typeof AuthAdminRoute
    }
    '/_auth/leagues/$leagueId/': {
      id: '/_auth/leagues/$leagueId/'
      path: '/leagues/$leagueId'
      fullPath: '/leagues/$leagueId'
      preLoaderRoute: typeof AuthLeaguesLeagueIdIndexLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/admin/_layout/': {
      id: '/_auth/admin/_layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AuthAdminLayoutIndexLazyRouteImport
      parentRoute: typeof AuthAdminLayoutRoute
    }
    '/_auth/tournaments/$tournamentId/_layout': {
      id: '/_auth/tournaments/$tournamentId/_layout'
      path: '/tournaments/$tournamentId'
      fullPath: '/tournaments/$tournamentId'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutRouteImport
      parentRoute: typeof AuthTournamentsTournamentIdRoute
    }
    '/_auth/admin/_layout/execution-jobs': {
      id: '/_auth/admin/_layout/execution-jobs'
      path: '/execution-jobs'
      fullPath: '/admin/execution-jobs'
      preLoaderRoute: typeof AuthAdminLayoutExecutionJobsRouteImport
      parentRoute: typeof AuthAdminLayoutRoute
    }
    '/_auth/tournaments/$tournamentId/_layout/standings': {
      id: '/_auth/tournaments/$tournamentId/_layout/standings'
      path: '/standings'
      fullPath: '/tournaments/$tournamentId/standings'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutStandingsLazyRouteImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutRoute
    }
    '/_auth/tournaments/$tournamentId/_layout/simulator': {
      id: '/_auth/tournaments/$tournamentId/_layout/simulator'
      path: '/simulator'
      fullPath: '/tournaments/$tournamentId/simulator'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRouteImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutRoute
    }
    '/_auth/tournaments/$tournamentId/_layout/performance': {
      id: '/_auth/tournaments/$tournamentId/_layout/performance'
      path: '/performance'
      fullPath: '/tournaments/$tournamentId/performance'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRouteImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutRoute
    }
    '/_auth/tournaments/$tournamentId/_layout/matches': {
      id: '/_auth/tournaments/$tournamentId/_layout/matches'
      path: '/matches'
      fullPath: '/tournaments/$tournamentId/matches'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutMatchesLazyRouteImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutRoute
    }
    '/_auth/admin/_layout/tournament/$tournamentId': {
      id: '/_auth/admin/_layout/tournament/$tournamentId'
      path: '/tournament/$tournamentId'
      fullPath: '/admin/tournament/$tournamentId'
      preLoaderRoute: typeof AuthAdminLayoutTournamentTournamentIdLazyRouteImport
      parentRoute: typeof AuthAdminLayoutRoute
    }
  }
}

interface AuthAdminLayoutRouteChildren {
  AuthAdminLayoutExecutionJobsRoute: typeof AuthAdminLayoutExecutionJobsRoute
  AuthAdminLayoutIndexLazyRoute: typeof AuthAdminLayoutIndexLazyRoute
  AuthAdminLayoutTournamentTournamentIdLazyRoute: typeof AuthAdminLayoutTournamentTournamentIdLazyRoute
}

const AuthAdminLayoutRouteChildren: AuthAdminLayoutRouteChildren = {
  AuthAdminLayoutExecutionJobsRoute: AuthAdminLayoutExecutionJobsRoute,
  AuthAdminLayoutIndexLazyRoute: AuthAdminLayoutIndexLazyRoute,
  AuthAdminLayoutTournamentTournamentIdLazyRoute:
    AuthAdminLayoutTournamentTournamentIdLazyRoute,
}

const AuthAdminLayoutRouteWithChildren = AuthAdminLayoutRoute._addFileChildren(
  AuthAdminLayoutRouteChildren,
)

interface AuthAdminRouteChildren {
  AuthAdminLayoutRoute: typeof AuthAdminLayoutRouteWithChildren
}

const AuthAdminRouteChildren: AuthAdminRouteChildren = {
  AuthAdminLayoutRoute: AuthAdminLayoutRouteWithChildren,
}

const AuthAdminRouteWithChildren = AuthAdminRoute._addFileChildren(
  AuthAdminRouteChildren,
)

interface AuthTournamentsTournamentIdLayoutRouteChildren {
  AuthTournamentsTournamentIdLayoutMatchesLazyRoute: typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  AuthTournamentsTournamentIdLayoutPerformanceLazyRoute: typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  AuthTournamentsTournamentIdLayoutSimulatorLazyRoute: typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  AuthTournamentsTournamentIdLayoutStandingsLazyRoute: typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}

const AuthTournamentsTournamentIdLayoutRouteChildren: AuthTournamentsTournamentIdLayoutRouteChildren =
  {
    AuthTournamentsTournamentIdLayoutMatchesLazyRoute:
      AuthTournamentsTournamentIdLayoutMatchesLazyRoute,
    AuthTournamentsTournamentIdLayoutPerformanceLazyRoute:
      AuthTournamentsTournamentIdLayoutPerformanceLazyRoute,
    AuthTournamentsTournamentIdLayoutSimulatorLazyRoute:
      AuthTournamentsTournamentIdLayoutSimulatorLazyRoute,
    AuthTournamentsTournamentIdLayoutStandingsLazyRoute:
      AuthTournamentsTournamentIdLayoutStandingsLazyRoute,
  }

const AuthTournamentsTournamentIdLayoutRouteWithChildren =
  AuthTournamentsTournamentIdLayoutRoute._addFileChildren(
    AuthTournamentsTournamentIdLayoutRouteChildren,
  )

interface AuthTournamentsTournamentIdRouteChildren {
  AuthTournamentsTournamentIdLayoutRoute: typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
}

const AuthTournamentsTournamentIdRouteChildren: AuthTournamentsTournamentIdRouteChildren =
  {
    AuthTournamentsTournamentIdLayoutRoute:
      AuthTournamentsTournamentIdLayoutRouteWithChildren,
  }

const AuthTournamentsTournamentIdRouteWithChildren =
  AuthTournamentsTournamentIdRoute._addFileChildren(
    AuthTournamentsTournamentIdRouteChildren,
  )

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthMyAccountRoute: typeof AuthMyAccountRoute
  AuthAdminRoute: typeof AuthAdminRouteWithChildren
  AuthLeaguesIndexLazyRoute: typeof AuthLeaguesIndexLazyRoute
  AuthTournamentsIndexLazyRoute: typeof AuthTournamentsIndexLazyRoute
  AuthTournamentsTournamentIdRoute: typeof AuthTournamentsTournamentIdRouteWithChildren
  AuthLeaguesLeagueIdIndexLazyRoute: typeof AuthLeaguesLeagueIdIndexLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
  AuthMyAccountRoute: AuthMyAccountRoute,
  AuthAdminRoute: AuthAdminRouteWithChildren,
  AuthLeaguesIndexLazyRoute: AuthLeaguesIndexLazyRoute,
  AuthTournamentsIndexLazyRoute: AuthTournamentsIndexLazyRoute,
  AuthTournamentsTournamentIdRoute:
    AuthTournamentsTournamentIdRouteWithChildren,
  AuthLeaguesLeagueIdIndexLazyRoute: AuthLeaguesLeagueIdIndexLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  AuthRoute: AuthRouteWithChildren,
  UiSystemRoute: UiSystemRoute,
  LoginLazyRoute: LoginLazyRoute,
  SignupLazyRoute: SignupLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
