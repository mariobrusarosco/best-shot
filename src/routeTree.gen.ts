/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UiSystemImport } from './routes/ui-system'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index.route'
import { Route as AuthMyAccountImport } from './routes/_auth.my-account'
import { Route as AuthDashboardImport } from './routes/_auth.dashboard'
import { Route as AuthTournamentsTournamentIdLayoutImport } from './routes/_auth.tournaments/$tournamentId/_layout'

// Create Virtual Routes

const SignupLazyImport = createFileRoute('/signup')()
const AuthTournamentsTournamentIdImport = createFileRoute(
  '/_auth/tournaments/$tournamentId',
)()
const AuthTournamentsIndexLazyImport = createFileRoute('/_auth/tournaments/')()
const AuthLeaguesIndexLazyImport = createFileRoute('/_auth/leagues/')()
const AuthLeaguesLeagueIdIndexLazyImport = createFileRoute(
  '/_auth/leagues/$leagueId/',
)()
const AuthTournamentsTournamentIdLayoutStandingsLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/_layout/standings',
)()
const AuthTournamentsTournamentIdLayoutSimulatorLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/_layout/simulator',
)()
const AuthTournamentsTournamentIdLayoutPerformanceLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/_layout/performance',
)()
const AuthTournamentsTournamentIdLayoutMatchesLazyImport = createFileRoute(
  '/_auth/tournaments/$tournamentId/_layout/matches',
)()

// Create/Update Routes

const SignupLazyRoute = SignupLazyImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const UiSystemRoute = UiSystemImport.update({
  id: '/ui-system',
  path: '/ui-system',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthMyAccountRoute = AuthMyAccountImport.update({
  id: '/my-account',
  path: '/my-account',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthTournamentsTournamentIdRoute =
  AuthTournamentsTournamentIdImport.update({
    id: '/tournaments/$tournamentId',
    path: '/tournaments/$tournamentId',
    getParentRoute: () => AuthRoute,
  } as any)

const AuthTournamentsIndexLazyRoute = AuthTournamentsIndexLazyImport.update({
  id: '/tournaments/',
  path: '/tournaments/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.tournaments/index.lazy').then((d) => d.Route),
)

const AuthLeaguesIndexLazyRoute = AuthLeaguesIndexLazyImport.update({
  id: '/leagues/',
  path: '/leagues/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.leagues/index.lazy').then((d) => d.Route),
)

const AuthLeaguesLeagueIdIndexLazyRoute =
  AuthLeaguesLeagueIdIndexLazyImport.update({
    id: '/leagues/$leagueId/',
    path: '/leagues/$leagueId/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth.leagues/$leagueId/index.lazy').then((d) => d.Route),
  )

const AuthTournamentsTournamentIdLayoutRoute =
  AuthTournamentsTournamentIdLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => AuthTournamentsTournamentIdRoute,
  } as any)

const AuthTournamentsTournamentIdLayoutStandingsLazyRoute =
  AuthTournamentsTournamentIdLayoutStandingsLazyImport.update({
    id: '/standings',
    path: '/standings',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.standings.lazy'
    ).then((d) => d.Route),
  )

const AuthTournamentsTournamentIdLayoutSimulatorLazyRoute =
  AuthTournamentsTournamentIdLayoutSimulatorLazyImport.update({
    id: '/simulator',
    path: '/simulator',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.simulator.lazy'
    ).then((d) => d.Route),
  )

const AuthTournamentsTournamentIdLayoutPerformanceLazyRoute =
  AuthTournamentsTournamentIdLayoutPerformanceLazyImport.update({
    id: '/performance',
    path: '/performance',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.performance.lazy'
    ).then((d) => d.Route),
  )

const AuthTournamentsTournamentIdLayoutMatchesLazyRoute =
  AuthTournamentsTournamentIdLayoutMatchesLazyImport.update({
    id: '/matches',
    path: '/matches',
    getParentRoute: () => AuthTournamentsTournamentIdLayoutRoute,
  } as any).lazy(() =>
    import(
      './routes/_auth.tournaments/$tournamentId/_layout.matches.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/ui-system': {
      id: '/ui-system'
      path: '/ui-system'
      fullPath: '/ui-system'
      preLoaderRoute: typeof UiSystemImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_auth/my-account': {
      id: '/_auth/my-account'
      path: '/my-account'
      fullPath: '/my-account'
      preLoaderRoute: typeof AuthMyAccountImport
      parentRoute: typeof AuthImport
    }
    '/_auth/leagues/': {
      id: '/_auth/leagues/'
      path: '/leagues'
      fullPath: '/leagues'
      preLoaderRoute: typeof AuthLeaguesIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/': {
      id: '/_auth/tournaments/'
      path: '/tournaments'
      fullPath: '/tournaments'
      preLoaderRoute: typeof AuthTournamentsIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId': {
      id: '/_auth/tournaments/$tournamentId'
      path: '/tournaments/$tournamentId'
      fullPath: '/tournaments/$tournamentId'
      preLoaderRoute: typeof AuthTournamentsTournamentIdImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId/_layout': {
      id: '/_auth/tournaments/$tournamentId/_layout'
      path: '/tournaments/$tournamentId'
      fullPath: '/tournaments/$tournamentId'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutImport
      parentRoute: typeof AuthTournamentsTournamentIdRoute
    }
    '/_auth/leagues/$leagueId/': {
      id: '/_auth/leagues/$leagueId/'
      path: '/leagues/$leagueId'
      fullPath: '/leagues/$leagueId'
      preLoaderRoute: typeof AuthLeaguesLeagueIdIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tournaments/$tournamentId/_layout/matches': {
      id: '/_auth/tournaments/$tournamentId/_layout/matches'
      path: '/matches'
      fullPath: '/tournaments/$tournamentId/matches'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutMatchesLazyImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutImport
    }
    '/_auth/tournaments/$tournamentId/_layout/performance': {
      id: '/_auth/tournaments/$tournamentId/_layout/performance'
      path: '/performance'
      fullPath: '/tournaments/$tournamentId/performance'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutPerformanceLazyImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutImport
    }
    '/_auth/tournaments/$tournamentId/_layout/simulator': {
      id: '/_auth/tournaments/$tournamentId/_layout/simulator'
      path: '/simulator'
      fullPath: '/tournaments/$tournamentId/simulator'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutSimulatorLazyImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutImport
    }
    '/_auth/tournaments/$tournamentId/_layout/standings': {
      id: '/_auth/tournaments/$tournamentId/_layout/standings'
      path: '/standings'
      fullPath: '/tournaments/$tournamentId/standings'
      preLoaderRoute: typeof AuthTournamentsTournamentIdLayoutStandingsLazyImport
      parentRoute: typeof AuthTournamentsTournamentIdLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthTournamentsTournamentIdLayoutRouteChildren {
  AuthTournamentsTournamentIdLayoutMatchesLazyRoute: typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  AuthTournamentsTournamentIdLayoutPerformanceLazyRoute: typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  AuthTournamentsTournamentIdLayoutSimulatorLazyRoute: typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  AuthTournamentsTournamentIdLayoutStandingsLazyRoute: typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}

const AuthTournamentsTournamentIdLayoutRouteChildren: AuthTournamentsTournamentIdLayoutRouteChildren =
  {
    AuthTournamentsTournamentIdLayoutMatchesLazyRoute:
      AuthTournamentsTournamentIdLayoutMatchesLazyRoute,
    AuthTournamentsTournamentIdLayoutPerformanceLazyRoute:
      AuthTournamentsTournamentIdLayoutPerformanceLazyRoute,
    AuthTournamentsTournamentIdLayoutSimulatorLazyRoute:
      AuthTournamentsTournamentIdLayoutSimulatorLazyRoute,
    AuthTournamentsTournamentIdLayoutStandingsLazyRoute:
      AuthTournamentsTournamentIdLayoutStandingsLazyRoute,
  }

const AuthTournamentsTournamentIdLayoutRouteWithChildren =
  AuthTournamentsTournamentIdLayoutRoute._addFileChildren(
    AuthTournamentsTournamentIdLayoutRouteChildren,
  )

interface AuthTournamentsTournamentIdRouteChildren {
  AuthTournamentsTournamentIdLayoutRoute: typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
}

const AuthTournamentsTournamentIdRouteChildren: AuthTournamentsTournamentIdRouteChildren =
  {
    AuthTournamentsTournamentIdLayoutRoute:
      AuthTournamentsTournamentIdLayoutRouteWithChildren,
  }

const AuthTournamentsTournamentIdRouteWithChildren =
  AuthTournamentsTournamentIdRoute._addFileChildren(
    AuthTournamentsTournamentIdRouteChildren,
  )

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthMyAccountRoute: typeof AuthMyAccountRoute
  AuthLeaguesIndexLazyRoute: typeof AuthLeaguesIndexLazyRoute
  AuthTournamentsIndexLazyRoute: typeof AuthTournamentsIndexLazyRoute
  AuthTournamentsTournamentIdRoute: typeof AuthTournamentsTournamentIdRouteWithChildren
  AuthLeaguesLeagueIdIndexLazyRoute: typeof AuthLeaguesLeagueIdIndexLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
  AuthMyAccountRoute: AuthMyAccountRoute,
  AuthLeaguesIndexLazyRoute: AuthLeaguesIndexLazyRoute,
  AuthTournamentsIndexLazyRoute: AuthTournamentsIndexLazyRoute,
  AuthTournamentsTournamentIdRoute:
    AuthTournamentsTournamentIdRouteWithChildren,
  AuthLeaguesLeagueIdIndexLazyRoute: AuthLeaguesLeagueIdIndexLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/ui-system': typeof UiSystemRoute
  '/signup': typeof SignupLazyRoute
  '/dashboard': typeof AuthDashboardRoute
  '/my-account': typeof AuthMyAccountRoute
  '/leagues': typeof AuthLeaguesIndexLazyRoute
  '/tournaments': typeof AuthTournamentsIndexLazyRoute
  '/tournaments/$tournamentId': typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
  '/leagues/$leagueId': typeof AuthLeaguesLeagueIdIndexLazyRoute
  '/tournaments/$tournamentId/matches': typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  '/tournaments/$tournamentId/performance': typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  '/tournaments/$tournamentId/simulator': typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  '/tournaments/$tournamentId/standings': typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/ui-system': typeof UiSystemRoute
  '/signup': typeof SignupLazyRoute
  '/dashboard': typeof AuthDashboardRoute
  '/my-account': typeof AuthMyAccountRoute
  '/leagues': typeof AuthLeaguesIndexLazyRoute
  '/tournaments': typeof AuthTournamentsIndexLazyRoute
  '/tournaments/$tournamentId': typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
  '/leagues/$leagueId': typeof AuthLeaguesLeagueIdIndexLazyRoute
  '/tournaments/$tournamentId/matches': typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  '/tournaments/$tournamentId/performance': typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  '/tournaments/$tournamentId/simulator': typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  '/tournaments/$tournamentId/standings': typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/ui-system': typeof UiSystemRoute
  '/signup': typeof SignupLazyRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/my-account': typeof AuthMyAccountRoute
  '/_auth/leagues/': typeof AuthLeaguesIndexLazyRoute
  '/_auth/tournaments/': typeof AuthTournamentsIndexLazyRoute
  '/_auth/tournaments/$tournamentId': typeof AuthTournamentsTournamentIdRouteWithChildren
  '/_auth/tournaments/$tournamentId/_layout': typeof AuthTournamentsTournamentIdLayoutRouteWithChildren
  '/_auth/leagues/$leagueId/': typeof AuthLeaguesLeagueIdIndexLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/matches': typeof AuthTournamentsTournamentIdLayoutMatchesLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/performance': typeof AuthTournamentsTournamentIdLayoutPerformanceLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/simulator': typeof AuthTournamentsTournamentIdLayoutSimulatorLazyRoute
  '/_auth/tournaments/$tournamentId/_layout/standings': typeof AuthTournamentsTournamentIdLayoutStandingsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/ui-system'
    | '/signup'
    | '/dashboard'
    | '/my-account'
    | '/leagues'
    | '/tournaments'
    | '/tournaments/$tournamentId'
    | '/leagues/$leagueId'
    | '/tournaments/$tournamentId/matches'
    | '/tournaments/$tournamentId/performance'
    | '/tournaments/$tournamentId/simulator'
    | '/tournaments/$tournamentId/standings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/ui-system'
    | '/signup'
    | '/dashboard'
    | '/my-account'
    | '/leagues'
    | '/tournaments'
    | '/tournaments/$tournamentId'
    | '/leagues/$leagueId'
    | '/tournaments/$tournamentId/matches'
    | '/tournaments/$tournamentId/performance'
    | '/tournaments/$tournamentId/simulator'
    | '/tournaments/$tournamentId/standings'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/ui-system'
    | '/signup'
    | '/_auth/dashboard'
    | '/_auth/my-account'
    | '/_auth/leagues/'
    | '/_auth/tournaments/'
    | '/_auth/tournaments/$tournamentId'
    | '/_auth/tournaments/$tournamentId/_layout'
    | '/_auth/leagues/$leagueId/'
    | '/_auth/tournaments/$tournamentId/_layout/matches'
    | '/_auth/tournaments/$tournamentId/_layout/performance'
    | '/_auth/tournaments/$tournamentId/_layout/simulator'
    | '/_auth/tournaments/$tournamentId/_layout/standings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  UiSystemRoute: typeof UiSystemRoute
  SignupLazyRoute: typeof SignupLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  UiSystemRoute: UiSystemRoute,
  SignupLazyRoute: SignupLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/ui-system",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard",
        "/_auth/my-account",
        "/_auth/leagues/",
        "/_auth/tournaments/",
        "/_auth/tournaments/$tournamentId",
        "/_auth/leagues/$leagueId/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/ui-system": {
      "filePath": "ui-system.tsx"
    },
    "/signup": {
      "filePath": "signup.lazy.tsx"
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth"
    },
    "/_auth/my-account": {
      "filePath": "_auth.my-account.tsx",
      "parent": "/_auth"
    },
    "/_auth/leagues/": {
      "filePath": "_auth.leagues/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/": {
      "filePath": "_auth.tournaments/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/$tournamentId": {
      "filePath": "_auth.tournaments/$tournamentId",
      "parent": "/_auth",
      "children": [
        "/_auth/tournaments/$tournamentId/_layout"
      ]
    },
    "/_auth/tournaments/$tournamentId/_layout": {
      "filePath": "_auth.tournaments/$tournamentId/_layout.tsx",
      "parent": "/_auth/tournaments/$tournamentId",
      "children": [
        "/_auth/tournaments/$tournamentId/_layout/matches",
        "/_auth/tournaments/$tournamentId/_layout/performance",
        "/_auth/tournaments/$tournamentId/_layout/simulator",
        "/_auth/tournaments/$tournamentId/_layout/standings"
      ]
    },
    "/_auth/leagues/$leagueId/": {
      "filePath": "_auth.leagues/$leagueId/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/tournaments/$tournamentId/_layout/matches": {
      "filePath": "_auth.tournaments/$tournamentId/_layout.matches.lazy.tsx",
      "parent": "/_auth/tournaments/$tournamentId/_layout"
    },
    "/_auth/tournaments/$tournamentId/_layout/performance": {
      "filePath": "_auth.tournaments/$tournamentId/_layout.performance.lazy.tsx",
      "parent": "/_auth/tournaments/$tournamentId/_layout"
    },
    "/_auth/tournaments/$tournamentId/_layout/simulator": {
      "filePath": "_auth.tournaments/$tournamentId/_layout.simulator.lazy.tsx",
      "parent": "/_auth/tournaments/$tournamentId/_layout"
    },
    "/_auth/tournaments/$tournamentId/_layout/standings": {
      "filePath": "_auth.tournaments/$tournamentId/_layout.standings.lazy.tsx",
      "parent": "/_auth/tournaments/$tournamentId/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
